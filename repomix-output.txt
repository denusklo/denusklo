This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-02T17:28:21.224Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
astro.config.mjs
package.json
public/favicon.svg
readme.exp.md
README.md
src/components/BlogPost.astro
src/components/example.js
src/components/Footer.astro
src/components/Hamburger.astro
src/components/Header.astro
src/components/Navigation.astro
src/components/preact/Greeting.jsx
src/components/Social.astro
src/components/ThemeIcon.astro
src/components/vue/app.vue
src/components/vue/draggable.vue
src/components/vue/food.vue
src/components/vue/form.vue
src/components/vue/greeting.vue
src/components/vue/login.vue
src/components/vue/navigation.vue
src/components/vue/post-login.vue
src/components/vue/product-detail.vue
src/components/vue/product.vue
src/components/vue/review-list.vue
src/components/vue/todo.vue
src/env.d.ts
src/layouts/BaseLayout.astro
src/layouts/MarkdownPostLayout.astro
src/pages/about.astro
src/pages/blog.astro
src/pages/index.astro
src/pages/posts/post-1.md
src/pages/posts/post-2.md
src/pages/posts/post-3.md
src/pages/posts/post-4.md
src/pages/rss.xml.js
src/pages/tags/[tag].astro
src/pages/tags/index.astro
src/pages/vue/index.astro
src/pages/vue/pinia.astro
src/react/components/loader/Loader.css
src/react/components/loader/Loader.tsx
src/react/context/LoaderProvider.tsx
src/react/hooks/useLoader.ts
src/scripts/menu.js
src/scripts/store.js
src/scripts/todo.js
src/styles/global.css
tailwind.config.cjs
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

.env

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';
import tailwind from "@astrojs/tailwind";
import vue from "@astrojs/vue";
import preact from '@astrojs/preact';


// https://astro.build/config
export default defineConfig({
  integrations: [
    tailwind(),
    vue(),
    preact({
      include: ['**/preact/*', 'src/components/preact/*'],
    }),
  ]
});

================
File: package.json
================
{
  "name": "",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev --port 1132",
    "start": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/preact": "^4.0.5",
    "@astrojs/rss": "^2.4.3",
    "@astrojs/tailwind": "^4.0.0",
    "@astrojs/vue": "^2.2.1",
    "@vueuse/core": "^10.2.1",
    "astro": "^2.8.2",
    "pinia": "^2.0.0-rc.10",
    "tailwindcss": "^3.3.3",
    "vue": "^3.3.4",
    "vue-router": "^4.2.4"
  }
}

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: readme.exp.md
================
# Astro Starter Kit: Minimal

```
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:3000`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).

================
File: README.md
================
<h1 align="center">Hi 👋, I'm Kong Chak Sung</h1>
<h3 align="center">A Laravel fullstack developer from Malaysia</h3>

- 🌱 I’m currently learning **Vue.js, Pinia, Astro, React**

- 👨‍💻 All of my projects are available at [https://github.com/denusklo](https://github.com/denusklo)

- 💬 Ask me about **Laravel**

- 📫 How to reach me **denusklo@gmail.com**

<p align="left">
</p>

<h3 align="left">Languages and Tools:</h3>
<p align="left">
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg" alt="bootstrap" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg" alt="css3" width="40" height="40"/>  
    <img src="https://www.vectorlogo.zone/logos/firebase/firebase-icon.svg" alt="firebase" width="40" height="40"/>  
    <img src="https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg" alt="git" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg" alt="html5" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg" alt="javascript" width="40" height="40"/>  
    <img src="https://static-00.iconduck.com/assets.00/laravel-icon-497x512-uwybstke.png" alt="laravel" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/mysql/mysql-original-wordmark.svg" alt="mysql" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/php/php-original.svg" alt="php" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg" alt="python" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg" alt="react" width="40" height="40"/>  
    <img src="https://www.vectorlogo.zone/logos/tailwindcss/tailwindcss-icon.svg" alt="tailwind" width="40" height="40"/>  
    <img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/vuejs/vuejs-original-wordmark.svg" alt="vuejs" width="40" height="40"/> 
</p>

================
File: src/components/BlogPost.astro
================
---
const { url, title } = Astro.props
---

<li><a href={url}>{title}</a></li>

================
File: src/components/example.js
================
export default {
    
    new: "console.log('new');",
    method: {
        1: 'one',
    },

}

================
File: src/components/Footer.astro
================
---
import Social from '../components/Social.astro';

const platform = "github";
const username = "withastro";
---
<style>
  footer {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
  }
</style>

<footer>
  <Social platform="twitter" username="astrodotbuild" />
  <Social platform="github" username="withastro" />
  <Social platform="youtube" username="astrodotbuild" />
</footer>
<script>
  import "../scripts/menu.js";
</script>

================
File: src/components/Hamburger.astro
================
---
---
<div class="hamburger">
  <span class="line"></span>
  <span class="line"></span>
  <span class="line"></span>
</div>

================
File: src/components/Header.astro
================
---
import Hamburger from '../components/Hamburger.astro';
import Navigation from '../components/Navigation.astro';
import ThemeIcon from './ThemeIcon.astro';
---

<header class="py-4 border-b border-gray-200 dark:border-gray-700">
  <div class="flex items-center justify-between">
    <div class="flex items-center space-x-4">
      <a href="/" class="text-2xl font-bold text-gray-800 dark:text-white">CS</a>
      <ThemeIcon />
    </div>

    <div class="hidden md:block">
      <Navigation />
    </div>
    
    <div class="md:hidden">
      <Hamburger />
    </div>
  </div>
  
  <!-- Mobile menu, initially hidden -->
  <div class="mobile-nav-links hidden md:hidden mt-4 pb-2">
    <Navigation />
  </div>
</header>

================
File: src/components/Navigation.astro
================
---
const navItems = [
  { text: "Home", href: "/" },
  { text: "About", href: "/about" },
  { text: "Blog", href: "/blog" },
  { text: "Tags", href: "/tags" },
  { text: "Vue", href: "/vue" }
];

const currentPath = Astro.url.pathname;
---

<nav class="flex flex-col md:flex-row gap-4 md:gap-6">
  {navItems.map(item => (
    <a 
      href={item.href} 
      class={`font-medium transition duration-150 ease-in-out
             hover:text-blue-600 dark:hover:text-blue-400
             ${currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href)) ? 
               'text-blue-600 dark:text-blue-400' : 
               'text-gray-700 dark:text-gray-300'}`}
      aria-current={currentPath === item.href ? "page" : undefined}
    >
      {item.text}
    </a>
  ))}
</nav>

================
File: src/components/preact/Greeting.jsx
================
import { h } from 'preact';
import { useState } from 'preact/hooks';

export default function Greeting({messages}) {

  const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];

  const [greeting, setGreeting] = useState(messages[0]);

  return (
    <div>
      <h3>{greeting}! Thank you for visiting!</h3>
      <button onClick={() => setGreeting(randomMessage())}>
        New Greeting
      </button>
    </div>
  );
}

================
File: src/components/Social.astro
================
---
const { platform, username } = Astro.props;
---
<style>
  a {
    padding: 0.5rem 1rem;
    color: white;
    background-color: #4c1d95;
    text-decoration: none;
  }
</style>

<a href={`https://www.${platform}.com/${username}`}>{platform}</a>

================
File: src/components/ThemeIcon.astro
================
---
---
<button id="themeToggle">
  <svg width="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path class="sun" fill-rule="evenodd" d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"/>
    <path class="moon" fill-rule="evenodd" d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"/>
  </svg>
</button>

<style>
  #themeToggle {
    border: 0;
    background: none;
  }
  .sun { fill: black; }
  .moon { fill: transparent; }


  :global(.dark) .sun { fill: transparent; }
  :global(.dark) .moon { fill: white; }
</style>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
      return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  document.getElementById("themeToggle").addEventListener("click", handleToggleClick);
</script>

================
File: src/components/vue/app.vue
================
<style>
.color-circle {
  width: 50px;
  height: 50px;
  margin-top: 8px;
  border: 2px solid #d8d8d8;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}
.disabledButton {
  background-color: #d8d8d8;
  cursor: not-allowed;
}
</style>


<template>
  <p>Cart({{ cart.length }})</p>
  <product :premium="premium" @add-to-cart="addToCart" @remove-from-cart="removeFromCart"></product>
  <login></login>
  <postLogin></postLogin>
</template>


<script>
  import product from './product.vue';
  import login from './login.vue';
  import postLogin from './post-login.vue';
  import detail from './product-detail.vue';

  export default {
    components: {
      product,
      detail,
      login,
      postLogin,
    },
    data() {
      return {
        premium: true,
        cart: [],
      }
    },
    methods: {
      addToCart(id) {
        this.cart.push(id)
      },
      removeFromCart(id) {

        const lastIndex = this.cart.lastIndexOf(id);

        // Check if the item is found in the array
        if (lastIndex !== -1) {
          // Use splice to remove the item at the found index
          this.cart.splice(lastIndex, 1);
        }

      }
    }

  }


</script>

================
File: src/components/vue/draggable.vue
================
<script setup lang="ts">
import { ref } from 'vue'
import { useDraggable } from '@vueuse/core'

const el = ref<HTMLElement | null>(null)

// `style` will be a helper computed for `left: ?px; top: ?px;`
const { x, y, style } = useDraggable(el, {
  initialValue: { x: 40, y: 40 },
})
</script>

<template>
  <div ref="el" :style="style" style="position: fixed; cursor: grabbing;">
    "Vueuse Drag" I am at {{x}}, {{y}}
  </div>
</template>

================
File: src/components/vue/food.vue
================
<template>
  <div>
    <ul>
      <li v-for="item in food">
        {{ item }}
      </li>
    </ul>
  </div>
</template>

<script setup lang="ts">
const food = ["Pizza", "French fries", "Spaghetti"];
</script>

================
File: src/components/vue/form.vue
================
<template>
  <form class="review-form flex flex-col max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700" @submit.prevent="onSubmit">
    <h3>Leave a review</h3>
    <label for="name">Name:</label>
    <input id="name" v-model="name">

    <label for="review">Review:</label>      
    <textarea id="review" v-model="review"></textarea>
    
    <label for="rating">Rating:</label>
    <select id="rating" v-model.number="rating">
      <option>5</option>
      <option>4</option>
      <option>3</option>
      <option>2</option>
      <option>1</option>
    </select>
    
    <label for="recommend">Would you recommend this product?</label>      
    <textarea id="recommend" v-model="recommend"></textarea>

    <input class="button text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 mt-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700" type="submit" value="Submit">
  </form>
</template>

<script>

export default {
  data() {
    return {
      name: '',
      review: '',
      rating: null,
      recommend: '',
    }
  },
  methods: {
    onSubmit() {

      if (this.name === '' || this.review === '' || this.rating === null) {
        alert('Review is incomplete. Please fill out every field.')
        return
      }

      let productReview = {
        name: this.name,
        review: this.review,
        rating: this.rating,
        recommend: this.recommend,
      }
      this.$emit('review-submitted', productReview)
  
      this.name = ''
      this.review = ''
      this.rating = null
    }
  }
}

</script>

================
File: src/components/vue/greeting.vue
================
<template>
  <div class="greeting-container">
    <h3>{{ greeting }}! Thank you for visiting!</h3>
    <button 
      class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors" 
      @click="setRandomGreeting"
    >
      New Greeting
    </button>
  </div>
</template>

<script setup>
import { ref } from 'vue';

const props = defineProps({
  messages: {
    type: Array,
    required: true,
    default: () => ["Hello", "Hi", "Hey"]
  }
});

const randomMessage = () => {
  return props.messages[Math.floor(Math.random() * props.messages.length)];
};

const greeting = ref(props.messages[0]);

const setRandomGreeting = () => {
  greeting.value = randomMessage();
};
</script>

<style scoped>
.greeting-container {
  margin: 2rem 0;
  padding: 1rem;
  border-radius: 0.5rem;
  background-color: #f8f9fa;
}

.dark .greeting-container {
  background-color: #2d3748;
}
</style>

================
File: src/components/vue/login.vue
================
<style>
  input {
    color: brown !important;
  }
</style>

<template>
  <form @submit.prevent="submitForm">
    <input type="text" v-model="username" placeholder="Username">
    <input type="password" v-model="password" placeholder="Password">
    <button type="submit">Submit</button>
  </form>
</template>

<script>
export default {
  data() {
    return {
      username: '',
      password: '',
      responseData: null,
    };
  },
  methods: {
    async submitForm() {
      try {
        const response = await fetch(import.meta.env.PUBLIC_API_URL + '/v1/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: this.username,
            password: this.password,
          }),
        });

        if (response.ok) {
          // Request successful, handle the response if needed
          console.log('Form submission successful');

          // Extract the JSON data from the response body
          const data = await response.json();

          // Update the Vue component's data with the received data
          this.responseData = data;

          const accessToken = data.access_token;
          localStorage.setItem('access_token', accessToken);

        } else {
          // Request failed, handle the error if needed
          console.error('Form submission failed:', response.status);
        }
      } catch (error) {
        console.error('Form submission failed:', error);
        // Handle the error if needed
      }
    },
  },
};
</script>

================
File: src/components/vue/navigation.vue
================
<template>
  <div>
    <nav>
      <button role="button" @click="openMenu(true)" v-if="!isMenuOpen">
        Open Menu
      </button>
      <button role="button" @click="openMenu(false)" v-else>
        Close Menu
      </button>
      <ul v-if="isMenuOpen">
        <li>
          <a href="/">Home</a>
        </li>
        <li>
          <a href="/about">About</a>
        </li>
      </ul>
    </nav>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const isMenuOpen = ref<boolean>(false)

const openMenu = (action: boolean) => {
  isMenuOpen.value = action;
}
</script>

================
File: src/components/vue/post-login.vue
================
<template>
  <div>
    <h2>Protected Content</h2>
    <div v-if="isLoading">Loading...</div>
    <div v-else>
      {{data}}
      <!-- Display your fetched data here -->
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      isLoading: true,
      data: null,
    };
  },
  async created() {
    try {
      const accessToken = localStorage.getItem('access_token');
      if (!accessToken) {
        // Redirect to the login page if the user is not authenticated
        // or show an error message
        return;
      }

      const response = await fetch(import.meta.env.PUBLIC_API_URL + '/v1/user', {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        this.data = data;
      } else {
        // Handle the case where the API request is not successful
        // You can log out the user or display an error message
      }
    } catch (error) {
      // Handle any errors that occur during the API request
      console.error('API request error');
    } finally {
      this.isLoading = false;
    }
  },
};
</script>

================
File: src/components/vue/product-detail.vue
================
<template>
  {{ details }}
</template>

<script>

export default {
  name: 'product-display',
  props: {
    details: {
      type: Boolean,
      required: true
    }
  },
  data() {

  },
  computed: {
    details() {
      return this.details;
    }

  }
}

</script>

================
File: src/components/vue/product.vue
================
<template>
  <div class="product-display">
    <div class="product-container">
      <div class="product-image">
        <img v-bind:src="image">
      </div>
      <div class="product-info">
        <h1>{{ title }}</h1>

        <p>Shipping: {{ shipping }}</p>
        <p v-if="inStock">In Stock</p>
        <p v-else>Out of Stock</p>

        <div 
          v-for="(variant, index) in variants" 
          :key="variant.id" 
          @mouseover="updateVariant(index)" 
          class="color-circle" 
          :style="{ backgroundColor: variant.color }">
        </div>
        
        <div>
          <button 
            class="button" 
            :class="{ disabledButton: !inStock }" 
            :disabled="!inStock" 
            v-on:click="addToCart">
            Add to Cart
          </button>
        </div>
        <div>
          <button 
            class="button" 
            v-on:click="removeFromCart">
            Remove from Cart
          </button>
        </div>
        <list :reviews="reviews"></list>
        <customForm @review-submitted="addReview"></customForm>
      </div>
    </div>
  </div>
</template>

<script>
  import customForm from './form.vue';
  import list from './review-list.vue';

  export default {
    name: 'product-display',
    components: {
      customForm,
      list,
    },
    props: {
      premium: {
        type: Boolean,
        required: true
      }
    },
    data() {
      return {
        product: 'Socks',
        brand: 'Vue Mastery',
        selectedVariant: 0,
        details: ['50% cotton', '30% wool', '20% polyester'],
        variants: [
          { id: 2234, color: 'green', image: 'socks1.jpg', quantity: 50 },
          { id: 2235, color: 'blue', image: 'socks2.jpg', quantity: 1 },
        ],
        reviews: [],
      }
    },
    methods: {
      updateVariant(index) {
          this.selectedVariant = index
      },
      addToCart() {
        this.$emit('add-to-cart', this.variants[this.selectedVariant].id)
      },
      removeFromCart() {
        this.$emit('remove-from-cart', this.variants[this.selectedVariant].id)
      },
      addReview(review) {
        this.reviews.push(review)
      }
    },
    computed: {
      title() {
          return this.brand + ' ' + this.product
      },
      image() {
          return this.variants[this.selectedVariant].image
      },
      inStock() {
          return this.variants[this.selectedVariant].quantity
      },
      shipping()
      {
        if (this.premium) {
          return 'Free'
        } else {
          return 2.99
        }
      }
    }
  }
</script>

================
File: src/components/vue/review-list.vue
================
<template>

<div class="review-container">
  <h3>Reviews:</h3>
  <ul>
    <li v-for="(review, index) in reviews" :key="index">
      {{ review.name }} gave this {{ review.rating }} stars
      <br/>
      "{{ review.review }}". Recommendation: "{{ review.recommend }}"      
      <br/>
    </li>
  </ul>
</div>

</template>

<script>

  export default {
    props: {
      reviews: {
        type: Array,
        required: true
      }
    },
  }

</script>

================
File: src/components/vue/todo.vue
================
<template>
  <input type="text" v-model="mytodo" style="color: black;"/>
  <button @click="AddTodo">Add Todo</button>
  <div v-if="!isEmpty">
    <p v-for="(todo, index) in todos" :key="index">
      {{ index }}. {{ todo }} <button @click="removeTodo(index)">delete</button>
    </p>
  </div>
  <div v-else>No todos found</div>
</template>

<script>
import { computed, ref } from "vue";
import { useMainStore } from "../../scripts/store.js";
export default {
  setup() {
    const main = useMainStore();
    const mytodo = ref("");
    const AddTodo = () => {
      if (mytodo.value != "") {
        main.addTodo(mytodo.value);
        mytodo.value = "";
      }
    };
    return {
      AddTodo,
      mytodo,
      todos: computed(() => main.getAllTodos),
      isEmpty: computed(() => main.todoEmpty),
      removeTodo: main.removeTodo,
    };
  },
};
</script>

================
File: src/env.d.ts
================
/// <reference types="astro/client" />

================
File: src/layouts/BaseLayout.astro
================
---
import '@/styles/global.css';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';

const { pageTitle } = Astro.props;
---

<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Kong Chak Sung's portfolio website - Laravel fullstack developer from Malaysia" />
    <title>{pageTitle} | Kong Chak Sung</title>
    <!-- Add Google Fonts if needed -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gray-50 dark:bg-gray-900 dark:text-white font-worksans">
    <div class="flex flex-col min-h-screen max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <Header />
      
      <main class="flex-grow py-8">
        <h1 class="text-4xl font-bold mb-8">{pageTitle}</h1>
        <slot />
      </main>
      
      <Footer />
    </div>
    
    <!-- This script enables view transitions if you decide to use them -->
    <script>
      document.addEventListener('astro:page-load', () => {
        // Any client-side scripts can go here
      });
    </script>
  </body>
</html>

================
File: src/layouts/MarkdownPostLayout.astro
================
---
import BaseLayout from '../layouts/BaseLayout.astro';
const { frontmatter } = Astro.props;
---
<BaseLayout pageTitle={frontmatter.title}>
  <p>{frontmatter.pubDate.slice(0,10)}</p>
  <p><em>{frontmatter.description}</em></p>
  <p>Written by: {frontmatter.author}</p>
  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />
  <slot />
  <div class="tags">
    {frontmatter.tags.map((tag) => (
      <p class="tag"><a href={`tags/${tag}`}>{tag}</a></p>
    ))}
  </div>
</BaseLayout>

<style>
  a {
    color: #00539F;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
  }

  .tag {
    margin: 0.25em;
    border: dotted 1px #a1a1a1;
    border-radius: .5em;
    padding: .5em 1em;
    font-size: 1.15em;
    background-color: #F8FCFD;
  }
</style>

================
File: src/pages/about.astro
================
---
import '../styles/global.css';
import BaseLayout from '../layouts/BaseLayout.astro';
import Food from "../components/vue/food.vue";

const pageTitle = "About Me";

const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"],
};

const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];

const happy = true;
const finished = false;
const goal = 3;
---

<BaseLayout pageTitle={pageTitle}>
  <h2>... and my new Astro site!</h2>
  
  <ul>
    <li>My name is {identity.firstName}.</li>
    <li>I live in {identity.country} and I work as a {identity.occupation}.</li>
    {identity.hobbies.length >= 2 &&
      <li>Two of my hobbies are: {identity.hobbies[0]} and {identity.hobbies[1]}</li>
    }
  </ul>
  <p>My skills are:</p>
  <ul>
    {skills.map((skill) => <li class="skill">{skill}</li>)}
  </ul>

  <h1>Food I like:</h1>
  <Food />

  {happy && <p>I am happy to be learning Astro!</p>}

  {finished && <p>I finished this tutorial!</p>}

  {goal === 3 ? <p>My goal is to finish in 3 days.</p> : <p>My goal is not 3 days.</p>}
</BaseLayout>

================
File: src/pages/blog.astro
================
---
import '../styles/global.css';
import BaseLayout from '../layouts/BaseLayout.astro';
import BlogPost from '../components/BlogPost.astro';
const allPosts = await Astro.glob('../pages/posts/*.md');

const pageTitle = "My Astro Learning Blog";
---

<BaseLayout pageTitle={pageTitle}>
  <p>This is where I will post about my journey learning Astro.</p>
  <ul>
    {allPosts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title} />)}
  </ul>
</BaseLayout>

================
File: src/pages/index.astro
================
---
import BaseLayout from '@/layouts/BaseLayout.astro';
import Greeting from '@/components/preact/Greeting.jsx';
import GreetingVue from '@/components/vue/greeting.vue';

const pageTitle = "Home Page";
---

<BaseLayout pageTitle={pageTitle}>
  <main class="container mx-auto px-4 py-8">
    <section class="mb-12">
      <h2 class="text-3xl font-bold mb-6">My Portfolio</h2>
      <Greeting client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />
      <GreetingVue client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />
    </section>
    
    <section class="bg-gray-100 dark:bg-gray-800 p-8 rounded-lg shadow-md mb-12">
      <h2 class="text-2xl font-semibold mb-4">About Me</h2>
      <p class="mb-4">I'm Kong Chak Sung, a Laravel fullstack developer from Malaysia, currently expanding my skills in Vue.js, Pinia, Astro, and React.</p>
      <a href="/about" class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">Learn more →</a>
    </section>
    
    <section class="mb-12">
      <h2 class="text-2xl font-semibold mb-4">Recent Blog Posts</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- You can loop through blog posts here later -->
        <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-6 hover:shadow-lg transition-shadow">
          <h3 class="text-xl font-medium mb-2">My First Blog Post</h3>
          <p class="text-gray-600 dark:text-gray-300 mb-4">This is the first post of my new Astro blog.</p>
          <a href="/blog" class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">Read more →</a>
        </div>
      </div>
    </section>
  </main>
</BaseLayout>

<script>
  import example from '@/components/example.js';
  console.log(example);
</script>

================
File: src/pages/posts/post-1.md
================
---
layout: ../../layouts/MarkdownPostLayout.astro
title: 'My First Blog Post'
pubDate: 2022-07-01
description: 'This is the first post of my new Astro blog.'
author: 'Astro Learner'
image:
    url: 'https://docs.astro.build/assets/full-logo-light.png'
    alt: 'The full Astro logo.'
tags: ["astro", "blogging", "learning in public"]
---
# My First Blog Post

Published on: 2022-07-01

Welcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.

## What I've accomplished

1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.

2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.

3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!

## What's next

I will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.

================
File: src/pages/posts/post-2.md
================
---
layout: ../../layouts/MarkdownPostLayout.astro
title: My Second Blog Post
author: Astro Learner
description: "After learning some Astro, I couldn't stop!"
image:
    url: "https://docs.astro.build/assets/arc.webp"
    alt: "Thumbnail of Astro arcs."
pubDate: 2022-07-08
tags: ["astro", "blogging", "learning in public", "successes"]
---
After a successful first week learning Astro, I decided to try some more. I wrote and imported a small component from memory!

================
File: src/pages/posts/post-3.md
================
---
layout: ../../layouts/MarkdownPostLayout.astro
title: My Third Blog Post
author: Astro Learner
description: "I had some challenges, but asking in the community really helped!"
image:
    url: "https://docs.astro.build/assets/rays.webp"
    alt: "Thumbnail of Astro rays."
pubDate: 2022-07-15
tags: ["astro", "learning in public", "setbacks", "community"]
---
It wasn't always smooth sailing, but I'm enjoying building with Astro. And, the [Discord community](https://astro.build/chat) is really friendly and helpful!

================
File: src/pages/posts/post-4.md
================
---
layout: ../../layouts/MarkdownPostLayout.astro
title: My Fourth Blog Post
author: Astro Learner
description: "This post will show up on its own!"
image:
  url: "https://docs.astro.build/default-og-image.png"
  alt: "The word “astro” against an illustration of planets and stars."
pubDate: 2022-08-08
tags: ["astro", "successes"]
---
This post should show up with my other blog posts, because `Astro.glob()` is returning a list of all my posts in order to create my list.

================
File: src/pages/rss.xml.js
================
import rss, { pagesGlobToRssItems } from '@astrojs/rss';

export async function get() {
  return rss({
    title: 'Astro Learner | Blog',
    description: 'My journey learning Astro',
    site: 'https://denusklo.vercel.app/',
    items: await pagesGlobToRssItems(import.meta.glob('./**/*.md')),
    customData: `<language>en-us</language>`,
  });
}

================
File: src/pages/tags/[tag].astro
================
---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';

export async function getStaticPaths() {
  const allPosts = await Astro.glob('../posts/*.md');

  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });

}

const { tag } = Astro.params;
const { posts } = Astro.props;

---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>

================
File: src/pages/tags/index.astro
================
---
import '../../styles/global.css';
import BaseLayout from '../../layouts/BaseLayout.astro';

const pageTitle = 'Tag index';
const allPosts = await Astro.glob('../posts/*.md');
const tags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

---
<style>
  a {
    color: #00539F;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
  }

  .tag {
    margin: 0.25em;
    border: dotted 1px #a1a1a1;
    border-radius: .5em;
    padding: .5em 1em;
    font-size: 1.15em;
    background-color: #F8FCFD;
  }
</style>

<BaseLayout pageTitle={pageTitle}>
  <div class="tags">
    {tags.map((tag) => (
      <p class="tag"><a href={`tags/${tag}`}>{tag}</a></p>
    ))}
  </div>
</BaseLayout>

================
File: src/pages/vue/index.astro
================
---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Draggable from '../../components/vue/draggable.vue';

const pageTitle = "Vue";
---
<BaseLayout pageTitle={pageTitle}>
  <h2>Vue Playground</h2>
	<Draggable client:idle/>
  <div id="app"></div>
  
  <div class="mt-10">
    <a href="/vue/pinia" style="color: #17b8fe;">Pinia Playground</a>
  </div>
</BaseLayout>


<script>
import { createApp } from 'vue';
import App from '../../components/vue/app.vue';
import { createRouter, createWebHistory } from 'vue-router';
import { createPinia } from 'pinia'

const app = createApp(App);
app.use(createPinia);
app.mount('#app');
</script>

================
File: src/pages/vue/pinia.astro
================
---
import BaseLayout from '../../layouts/BaseLayout.astro';

const pageTitle = "Vue > Pinia";

--- 
<BaseLayout pageTitle={pageTitle}>
  <h2>Pinia Playground</h2>
  <div id="app"></div>
</BaseLayout>

<script src="/src/scripts/todo.js"></script>

================
File: src/react/components/loader/Loader.css
================
.loader{
  position: absolute;
  z-index: 99999;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100vw;
  height: 100vh;
  background-color: white;
  opacity: 0.9;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.spinner{
  width: 60px;
  height: 60px;
  border: 10px solid #ccc;
  border-top: 10px solid #2F73A3;
  border-radius: 50%;
  animation: spin 1.5s linear infinite;
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
.loader-message{
  margin-top: 10px;
  font-size: 22px;
  font-weight: 600;
  color : #2F73A3;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
}

================
File: src/react/components/loader/Loader.tsx
================
import React from 'react';
import "./Loader.css";

type Loader = {
  message: string | undefined;
};

export const Loader: React.FC<Loader> = ({ message }) => {
  return (
    <div className="loader">
      <span className="spinner"></span>
      <span className="loader-message">{message}</span>
    </div>
  );
};

================
File: src/react/context/LoaderProvider.tsx
================
import React, { ReactNode, createContext, useState } from 'react';
import { Loader } from '../components/loader/Loader';

type LoaderContext = {
  showLoader: (message: string) => void;
  hideLoader: () => void;
};

type LoaderContextProvider = {
  children: ReactNode;
};

export const LoaderContext = createContext<LoaderContext | undefined>(
  undefined
);

export const LoaderProvider: React.FC<LoaderContextProvider> = ({
  children,
}) => {
  const [isVisible, setIsVisible] = useState<boolean>(false);
  const [loaderMessage, setLoaderMessage] = useState<string | undefined>();

  const contextValue: LoaderContext = {
    showLoader: (message) => {
      setLoaderMessage(message);
      setIsVisible(true);
    },
    hideLoader: () => {
      setIsVisible(false);
    },
  };

  return (
    <LoaderContext.Provider value={contextValue}>
      {isVisible && <Loader message={loaderMessage} />}
      {children}
    </LoaderContext.Provider>
  );
};

================
File: src/react/hooks/useLoader.ts
================
import { useContext } from "react";
import { LoaderContext } from "../context/LoaderProvider";

export const useLoader = ()=>{
  const context = useContext(LoaderContext);
    if (!context) {
      throw new Error("useLoader must be used within a LoaderProvider");
    }
    return context;
}

================
File: src/scripts/menu.js
================
document.querySelector('.hamburger').addEventListener('click', () => {
  document.querySelector('.mobile-nav-links').classList.toggle('expanded');
});

================
File: src/scripts/store.js
================
import { defineStore } from 'pinia'
import { useStorage } from '@vueuse/core'

export const useMainStore = defineStore({
    id: 'main',
    state: () => ({
        todos: useStorage('todos', []),

    }),
    getters: {
        getAllTodos() {
            return this.todos
        },
        todoEmpty() {
            return this.todos.length <= 0
        }
    },
    actions: {
        addTodo(todo) {
            this.todos.push(todo);
        },
        removeTodo(index) {
            this.todos.splice(index, 1)
        }

    },
})

================
File: src/scripts/todo.js
================
import { createApp } from 'vue'
import App from '../components/vue/todo.vue'
import { createPinia } from 'pinia'

createApp(App).use(createPinia()).mount('#app');

================
File: src/styles/global.css
================
html {
  background-color: #f1f5f9;
  font-family: sans-serif;
}

body {
  margin: 0 auto !important;
  width: 100%;
  max-width: 80ch;
  padding: 1rem;
  line-height: 1.5 !important;
}

* {
  box-sizing: border-box;
}

h1 {
  margin: 1rem 0;
  font-size: 2.5rem;
}

/* nav styles */
.hamburger {
  padding-right: 20px;
  cursor: pointer;
}

.hamburger .line {
  display: block;
  width: 40px;
  height: 5px;
  margin-bottom: 10px;
  background-color: #ff9776;
}

.nav-links {
  width: 100%;
  top: 5rem;
  left: 48px;
  background-color: #ff9776;
  display: none;
  margin: 0;
}

.nav-links a {
  display: block;
  text-align: center;
  padding: 10px 0;
  text-decoration: none;
  font-size: 1.2rem;
  font-weight: bold;
  text-transform: uppercase;
}

.nav-links a:hover, a:focus {
  background-color: #ff9776;
}

.expanded {
  display: unset;
}

@media screen and (min-width: 636px) {
  .nav-links {
    margin-left: 5em;
    display: block;
    position: static;
    width: auto;
    background: none;
  }

  .nav-links a {
    display: inline-block;
    padding: 15px 20px;
  }
  .hamburger {
    display: none;
  }
}

html.dark {
  background-color: #0d0950;
  color: #fff;
}

.dark .nav-links a {
  color: #fff;
}

.dark a {
  color: #fff;
}

.dark .tag {
  background-color: #37474b;
}

.mobile-nav-links {
  width: 100%;
  background-color: #ff9776;
  display: none;
  margin: 0;
}

.mobile-nav-links a {
  display: block;
  text-align: center;
  padding: 10px 0;
  text-decoration: none;
  font-size: 1.2rem;
  font-weight: bold;
  text-transform: uppercase;
}

.mobile-nav-links.expanded {
  display: block;
}

================
File: tailwind.config.cjs
================
/** @type {import('tailwindcss').Config} */
module.exports = {
	content: [
		'./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	theme: {
		extend: {
			colors: {
			gray: {
				200: "#D5DAE1"
			},
			black: {
				DEFAULT: "#000",
				500: "#1D2235"
			},
			blue: {
				500: "#2b77e7"
			}
			},
			fontFamily: {
				worksans: ["Work Sans", "sans-serif"],
				poppins: ['Poppins', "sans-serif"]
			},
			boxShadow: {
				card: '0px 1px 2px 0px rgba(0, 0, 0, 0.05)'
			}
		},
	},
	plugins: [],
}

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "preact",
    "types": ["vue"],
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
    },
  }
}
